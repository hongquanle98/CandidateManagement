@model ApplyDetailListViewModel
@inject IAbilityRepository abilityRepository
@inject IApplyDetailAbilityRepository applyDetailAbilityRepository
@inject IInterviewScheduleRepository interviewScheduleRepository
@inject IInterviewResultRepository interviewResultRepository
@inject IOperatorRepository operatorRepository
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Apply Detail List";
}

<div class="card">
    <div class="card-header bg-info text-white">Apply Detail List</div>
    <div class="card-body">
        <div class="card-text">
            <form class="mx-auto form-inline my-3" method="post" id="filterForm">
                <div class="form-group">
                    <label asp-for="FromDate">From Date</label>
                    <input asp-for="FromDate" class="form-control form-control-sm mx-3" type="date" id="fromDate">
                </div>
                <div class="form-group">
                    <label asp-for="ToDate">To Date</label>
                    <input asp-for="ToDate" class="form-control form-control-sm mx-3" type="date" id="toDate">
                </div>
                @*<div class="form-group">
                        <label asp-for="Status">Status</label>
                        <select asp-for="Status" class="form-control form-control-sm mx-3">
                            <option value="All" selected>All</option>
                            <optgroup label="CV Status">
                                <option value="CVPending">CV Pending</option>
                                <option value="CVPassed">CV Passed</option>
                                <option value="CVFailed">CV Failed</option>
                            </optgroup>

                            <optgroup label="Interview Status">
                                <option value="InterviewNotScheduled">Interview Not Scheduled</option>
                                <option value="InterviewPassed">Interview Passed</option>
                                <option value="InterviewFailed">Interview Failed</option>
                            </optgroup>
                        </select>
                    </div>*@
                <div class="form-group">
                    <button type="submit" class="btn btn-sm btn-outline-primary mx-3">Filter</button>
                    <a asp-controller="Admin" asp-action="ApplyDetailList">Clear</a>
                </div>
            </form>

            <table class="table table-bordered table-hover w-100 table-sm" id="applyDetailListTable">
                <thead>
                    <tr>
                        <th scope="col">Apply Date</th>
                        <th scope="col">Candidate Name</th>
                        <th scope="col">Requirement</th>
                        <th scope="col">Recruit Amount</th>
                        <th scope="col">Operator Mark</th>
                        <th scope="col">CV</th>
                        <th scope="col">Interview</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var applyDetail in Model.ApplyDetails)
                    {
                        var candidate = applyDetail.Apply.Candidate;
                        var applyDetailAbilities = applyDetailAbilityRepository.GetApplyDetailAbility(applyDetail.ApplyDetailId).OrderBy(ada => ada.ApplyDetailAbilityId);
                        var interviewSchedule = interviewScheduleRepository.GetInterviewScheduleByApplyDetailId(applyDetail.ApplyDetailId).LastOrDefault();
                        bool canEvaluate = false;
                        var operators = new List<Operator>();
                        var signedInOperator = operatorRepository.GetOperator(UserManager.GetUserId(User));
                        if (interviewSchedule != null)
                        {
                            canEvaluate = !interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Any(ir => ir.Point == 0) && User.IsInRole("Manager");
                            operators = interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Select(ir => ir.Operator).GroupBy(o => o.OperatorId).Select(o => o.First()).ToList();
                        }
                        <tr>
                            <td>@FormatHelper.FormatDate(applyDetail.ApplyDate)</td>
                            <td>@candidate.FullName</td>
                            <td><a target="_blank" asp-controller="Home" asp-action="RequirementDetail" asp-route-id="@applyDetail.RequirementId">@applyDetail.Requirement.Title</a></td>
                            <td>@applyDetail.Requirement.RecruitAmount employee</td>
                            <td class="text-nowrap">
                                <table class="table table-bordered table-hover table-sm table-in-table">
                                    <thead>
                                        <tr>
                                            <th class="font-weight-normal"></th>
                                            <th class="font-weight-normal">Candidate</th>
                                            @if (operators.Count() > 0)
                                            {
                                                foreach (var op in operators)
                                                {
                                                    <th class="@(signedInOperator != null && signedInOperator.OperatorId == op.OperatorId ? "" : "font-weight-normal")">@op.OperatorName</th>
                                                }
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var applyDetailAbility in applyDetailAbilities)
                                        {
                                            <tr>
                                                <td>@applyDetailAbility.Ability.AbilityName</td>
                                                <td>
                                                    <div class="progress" style="height: 12px;">
                                                        <div class="progress-bar bg-info" role="progressbar" style="width: @(applyDetailAbility.Point * 10)%;">@applyDetailAbility.Point</div>
                                                    </div>
                                                </td>
                                                @if (operators.Count() > 0)
                                                {
                                                    foreach (var op in operators)
                                                    {
                                                        var interviewResult = op.InterviewResult.FirstOrDefault(ir => ir.ApplyDetailAbilityId == applyDetailAbility.ApplyDetailAbilityId);
                                                        <th>
                                                            <div class="progress" style="height: 12px;">
                                                                <div class="progress-bar bg-info" role="progressbar" style="width: @(interviewResult.Point * 10)%;">@interviewResult.Point</div>
                                                            </div>
                                                        </th>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                            @await Html.PartialAsync("_ApplyDetailStatusPartial", new ApplyDetailCVViewModel() { Candidate = candidate, ApplyDetail = applyDetail, CanEvaluate = canEvaluate })
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>




@section Scripts {
}

