@model ApplyDetailListViewModel
@inject IAbilityRepository abilityRepository
@inject IApplyDetailAbilityRepository applyDetailAbilityRepository
@inject IInterviewScheduleRepository interviewScheduleRepository
@inject IInterviewResultRepository interviewResultRepository

@{
    ViewData["Title"] = "Apply Detail List";
}

<div class="card">
    <div class="card-header bg-info text-white">Apply Detail List</div>
    <div class="card-body">
        <div class="card-text">
            <form class="mx-auto form-inline my-3" method="post" id="filterForm">
                <div class="form-group">
                    <label asp-for="FromDate">From Date</label>
                    <input asp-for="FromDate" class="form-control form-control-sm mx-3" type="date" id="fromDate">
                </div>
                <div class="form-group">
                    <label asp-for="ToDate">To Date</label>
                    <input asp-for="ToDate" class="form-control form-control-sm mx-3" type="date" id="toDate">
                </div>
                @*<div class="form-group">
                    <label asp-for="Status">Status</label>
                    <select asp-for="Status" class="form-control form-control-sm mx-3">
                        <option value="All" selected>All</option>
                        <optgroup label="CV Status">
                            <option value="CVPending">CV Pending</option>
                            <option value="CVPassed">CV Passed</option>
                            <option value="CVFailed">CV Failed</option>
                        </optgroup>

                        <optgroup label="Interview Status">
                            <option value="InterviewNotScheduled">Interview Not Scheduled</option>
                            <option value="InterviewPassed">Interview Passed</option>
                            <option value="InterviewFailed">Interview Failed</option>
                        </optgroup>
                    </select>
                </div>*@
                <div class="form-group">
                    <button type="submit" class="btn btn-sm btn-outline-primary mx-3">Filter</button>
                    <a asp-controller="Admin" asp-action="ApplyDetailList">Clear</a>
                </div>
            </form>

            <table class="table table-bordered table-hover w-100 table-sm" id="applyDetailListTable">
                <thead>
                    <tr>
                        <th scope="col">Apply Date</th>
                        <th scope="col">Candidate Name</th>
                        @*<th scope="col">Date Of Birth</th>*@
                        <th scope="col">Expected Salary</th>
                        <th scope="col">Worked Time</th>
                        <th scope="col">Ability</th>
                        <th scope="col">Operator Mark</th>
                        <th scope="col">CV</th>
                        <th scope="col">Interview</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var applyDetail in Model.ApplyDetails)
                    {
                        var candidate = applyDetail.Apply.Candidate;
                        var applyDetailAbilities = applyDetailAbilityRepository.GetApplyDetailAbility(applyDetail.ApplyDetailId);
                        var interviewSchedule = interviewScheduleRepository.GetInterviewScheduleByApplyDetailId(applyDetail.ApplyDetailId).FirstOrDefault();
                        var interviewResults = new Dictionary<int, int>();
                        bool canEvaluate = false;
                        if (interviewSchedule != null)
                        {
                            canEvaluate = !interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Any(ir => ir.Point == 0);
                            int operatorCount = interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).GroupBy(i => i.OperatorId).Count();
                            interviewResults = interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Where(i => i.Point > 0).GroupBy(i => i.ApplyDetailAbilityId).ToDictionary(i => i.Key, i => i.Sum(ise => ise.Point) / operatorCount);
                        }
                        <tr>
                            <td>@FormatHelper.FormatDate(applyDetail.ApplyDate)</td>
                            <td>@candidate.FullName</td>
                            @*<td>@FormatHelper.FormatDate(candidate.DateOfBirth)</td>*@
                            <td>@FormatHelper.FormatCurrency(applyDetail.ExpectedSalary)</td>
                            <td>@applyDetail.WorkedTime year</td>
                            <td>
                                <ul class="list-unstyled">
                                    @foreach (var applyDetailAbility in applyDetailAbilities)
                                    {
                                        <li>
                                            <p class="mb-0">@applyDetailAbility.Ability.AbilityName</p>
                                            <div class="progress" style="height: 12px;">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: @(applyDetailAbility.Point * 10)%;">@applyDetailAbility.Point</div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </td>
                            <td>
                                <ul class="list-unstyled">
                                    @if (interviewResults.Count > 0)
                                    {
                                        foreach (var interviewResult in interviewResults)
                                        {
                                            var ability = applyDetailAbilityRepository.GetApplyDetailAbilityById(interviewResult.Key).Ability;
                                            int operatorPoint = interviewResult.Value;
                                            int candidatePoint = applyDetailAbilities.FirstOrDefault(ada => ada.AbilityId == ability.AbilityId).Point;
                                            string backgroundColorClass = operatorPoint >= candidatePoint ? "bg-success" : "bg-danger";
                                            <li>
                                                <p class="mb-0">@ability.AbilityName</p>
                                                <div class="progress" style="height: 12px;">
                                                    <div class="progress-bar @backgroundColorClass" role="progressbar" style="width: @(operatorPoint * 10)%;">@operatorPoint</div>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </td>
                            @await Html.PartialAsync("_ApplyDetailStatusPartial", new ApplyDetailCVViewModel() { Candidate = candidate, ApplyDetail = applyDetail, CanEvaluate = canEvaluate })
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>




@section Scripts {
}

