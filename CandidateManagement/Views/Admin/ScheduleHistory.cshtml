@model ScheduleHistoryViewModel
@inject IInterviewResultRepository interviewResultRepository
@inject IOperatorRepository operatorRepository
@inject IInterviewScheduleRepository interviewScheduleRepository
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "ScheduleHistory";
}
<h3>Schedule History</h3>
<div class="card-group">
    @await Html.PartialAsync("_CandidateInfoPartial", Model.Candidate)

    <input type="hidden" asp-for="@Model.ApplyDetail.ApplyDetailId" />
    <div class="w-100 my-1"></div>
    <div class="card">
        <div class="card-header bg-info text-white">Schedule History</div>
        <div class="card-body">
            <button class="btn btn-outline-primary btn-sm mb-3" onclick="ShowAddInterviewModal(@Model.ApplyDetail.ApplyDetailId);" disabled="@(!Model.ApplyDetail.IsInterviewPass.HasValue)">Add New Interview Schedule</button>
            <div class="card-text">
                @if (Model.InterviewSchedules.Count() > 0)
                {
                    <table class="table table-bordered table-hover w-100 table-sm" id="interviewScheduleListTable">
                        <thead>
                            <tr>
                                <th>Interview Date</th>
                                <th>Interview Time</th>
                                <th>Operator</th>
                                <th>Email Sent</th>
                                <th>Action</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @foreach (var interviewSchedule in Model.InterviewSchedules)
                                {
                                    bool canEvaluate = false;
                                    var operators = interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Select(ir => ir.Operator).GroupBy(o => o.OperatorId).Select(o => o.First());
                                    var signedInOperator = operatorRepository.GetOperator(UserManager.GetUserId(User));
                                    if (signedInOperator != null)
                                    {
                                        var irOfOperator = interviewResultRepository.GetInterviewResultByInterviewID(interviewSchedule.InterviewId).Where(ir => ir.OperatorId == signedInOperator.OperatorId);
                                        if (irOfOperator.Any() && interviewSchedule.ApplyDetail.IsInterviewPass == null)
                                        {
                                            canEvaluate = true;
                                        }
                                    }
                                    <td>@interviewSchedule.InterviewDate.ToString("yyyy/MM/dd")</td>
                                    <td>@string.Format("{0:hh\\:mm}", interviewSchedule.InterviewTime)</td>
                                    <td>
                                        @foreach (var op in operators)
                                        {
                                            <span class="badge badge-dark">
                                                @op.OperatorName
                                            </span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (interviewSchedule.IsEmailSent == true)
                                        {
                                            <p class="badge badge-success d-block">Yes</p>
                                        }
                                        else
                                        {
                                            <p class="badge badge-danger d-block">No</p>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <div class="d-flex justify-content-center">
                                            <button class="btn btn-link text-primary font-weight-bold btn-sm" onclick="ShowMarkAbilityModal(@Model.ApplyDetail.ApplyDetailId, @interviewSchedule.InterviewId);" disabled="@(canEvaluate ? false : true)">Mark Ability</button>

                                            <button class="btn btn-link text-info font-weight-bold btn-sm" onclick="ShowEditInterviewModal(@Model.ApplyDetail.ApplyDetailId, @interviewSchedule.InterviewId);">Edit</button>

                                            <form class="mx-1" asp-controller="Admin" asp-action="DeleteInterview" asp-route-id="@interviewSchedule.InterviewId" method="post">
                                                <button class="btn btn-link text-danger font-weight-bold btn-sm" type="submit" onclick="return confirm('Are you sure?');">Delete</button>
                                            </form>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        @{
                                            if (Model.ApplyDetail.IsCvpass == null || Model.ApplyDetail.IsCvpass == false)
                                            {
                                                <p class="badge badge-warning my-auto d-block">Invalid CV</p>
                                            }
                                            else
                                            {
                                                if (!interviewScheduleRepository.GetInterviewScheduleByApplyDetailId(Model.ApplyDetail.ApplyDetailId).Any())
                                                {
                                                    <p class="badge badge-info my-auto d-block">Pending</p>
                                                }
                                                else
                                                {
                                                    if (Model.ApplyDetail.IsInterviewPass == null)
                                                    {
                                                    <p class="badge badge-primary my-auto d-block">Not Evaluate</p>
                                                    }
                                                    if (Model.ApplyDetail.IsInterviewPass == true)
                                                    {
                                                        <p class="badge badge-success my-auto d-block">Passed</p>
                                                    }
                                                    if (Model.ApplyDetail.IsInterviewPass == false)
                                                    {
                                                        <p class="badge badge-danger my-auto d-block">Failed</p>
                                                    }
                                                }
                                            }
                                        }
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

